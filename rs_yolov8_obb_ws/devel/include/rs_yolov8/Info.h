// Generated by gencpp from file rs_yolov8/Info.msg
// DO NOT EDIT!


#ifndef RS_YOLOV8_MESSAGE_INFO_H
#define RS_YOLOV8_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rs_yolov8
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , angle(0.0)
    , classification()
    , confidence(0.0)  {
    }
  Info_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , angle(0.0)
    , classification(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _angle_type;
  _angle_type angle;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _classification_type;
  _classification_type classification;

   typedef double _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::rs_yolov8::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rs_yolov8::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::rs_yolov8::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::rs_yolov8::Info > InfoPtr;
typedef boost::shared_ptr< ::rs_yolov8::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rs_yolov8::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rs_yolov8::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rs_yolov8::Info_<ContainerAllocator1> & lhs, const ::rs_yolov8::Info_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.angle == rhs.angle &&
    lhs.classification == rhs.classification &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rs_yolov8::Info_<ContainerAllocator1> & lhs, const ::rs_yolov8::Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rs_yolov8

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rs_yolov8::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rs_yolov8::Info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_yolov8::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_yolov8::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_yolov8::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_yolov8::Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rs_yolov8::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c0cd277fce00eb84b787e9914662978";
  }

  static const char* value(const ::rs_yolov8::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c0cd277fce00eb8ULL;
  static const uint64_t static_value2 = 0x4b787e9914662978ULL;
};

template<class ContainerAllocator>
struct DataType< ::rs_yolov8::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rs_yolov8/Info";
  }

  static const char* value(const ::rs_yolov8::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rs_yolov8::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 angle\n"
"string classification\n"
"float64 confidence\n"
;
  }

  static const char* value(const ::rs_yolov8::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rs_yolov8::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.angle);
      stream.next(m.classification);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rs_yolov8::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rs_yolov8::Info_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "classification: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.classification);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RS_YOLOV8_MESSAGE_INFO_H
